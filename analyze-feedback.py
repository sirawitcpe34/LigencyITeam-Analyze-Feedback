# -*- coding: utf-8 -*-
"""Public Relations Department Skeleton

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oAUzm3_TVgiln0MtdcO6Nv03lxZDAAXU

# TASK #1: IMPORT LIBRARIES AND DATASETS
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

reviews_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/amazon_alexa.tsv', sep='\t')

reviews_df

reviews_df.info()

reviews_df.describe()

reviews_df['verified_reviews']

"""# TASK #2: EXPLORE DATASET"""

sns.heatmap(reviews_df.isnull(), yticklabels = False, cbar = False, cmap="Blues")

reviews_df.hist(bins = 30, figsize = (13,5), color = 'r')

reviews_df['length'] = reviews_df['verified_reviews'].apply(len)
reviews_df.head()

reviews_df['length'].plot(bins=100, kind='hist')

reviews_df.length.describe()

reviews_df[reviews_df['length'] == 133]['verified_reviews'].iloc[0]

positive = reviews_df[reviews_df['feedback']==1]

negative = reviews_df[reviews_df['feedback']==0]

positive

negative

sns.countplot(reviews_df['feedback'], label = "Count")

sns.countplot(x = 'rating', data = reviews_df)

reviews_df['rating'].hist(bins = 5)

plt.figure(figsize = (40,15))
sns.barplot(x = 'variation', y='rating', data = reviews_df, palette = 'deep')

sentences = reviews_df['verified_reviews'].tolist()
len(sentences)

print(sentences)

sentences_as_one_string =" ".join(sentences)

from wordcloud import WordCloud

plt.figure(figsize=(20,20))
plt.imshow(WordCloud().generate(sentences_as_one_string))

negative_list = negative['verified_reviews'].tolist()
negative_list

negative_sentences_as_one_string = " ".join(negative_list)

plt.figure(figsize=(20,20))
plt.imshow(WordCloud().generate(negative_sentences_as_one_string))

"""# TASK #3: PERFORM DATA CLEANING"""

reviews_df = reviews_df.drop(['date', 'rating', 'length'],axis=1)

reviews_df

variation_dummies = pd.get_dummies(reviews_df['variation'], drop_first = True)

variation_dummies

reviews_df.drop(['variation'], axis=1, inplace=True)

reviews_df = pd.concat([reviews_df, variation_dummies], axis=1)

reviews_df

"""# TASK #4: IMPORT REMOVE PUNCTUATION, REMOVE STOPWORDS, AND PERFORM COUNT VECTORIZATION (TOKENIZATION) FROM TEXT"""

import string
string.punctuation

import nltk 
nltk.download('stopwords')

from nltk.corpus import stopwords
stopwords.words('english')

from sklearn.feature_extraction.text import CountVectorizer

"""# TASK #5: PERFORM DATA CLEANING BY APPLYING EVERYTHING WE LEARNED SO FAR!"""

def message_cleaning(message):
    Test_punc_removed = [char for char in message if char not in string.punctuation]
    Test_punc_removed_join = ''.join(Test_punc_removed)
    Test_punc_removed_join_clean = [word for word in Test_punc_removed_join.split() if word.lower() not in stopwords.words('english')]
    return Test_punc_removed_join_clean

reviews_df_clean = reviews_df['verified_reviews'].apply(message_cleaning)

print(reviews_df_clean[3])

reviews_df_clean

from sklearn.feature_extraction.text import CountVectorizer
# Define the cleaning pipeline we defined earlier
vectorizer = CountVectorizer(analyzer = message_cleaning)
reviews_countvectorizer = vectorizer.fit_transform(reviews_df['verified_reviews'])

print(vectorizer.get_feature_names())

print(reviews_countvectorizer.toarray())

reviews_countvectorizer.shape

reviews_df

reviews_df.drop(['verified_reviews'], axis=1, inplace=True)
reviews = pd.DataFrame(reviews_countvectorizer.toarray())

reviews_df = pd.concat([reviews_df, reviews], axis=1)

reviews_df

X = reviews_df.drop(['feedback'],axis=1)
X

y = reviews_df['feedback']
y

"""# TASK #6: TRAIN A NAIVE BAYES CLASSIFIER MODEL"""

X.shape

y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.naive_bayes import MultinomialNB

NB_classifier = MultinomialNB()
NB_classifier.fit(X_train, y_train)

"""# TASK #7: ASSESS TRAINED MODEL PERFORMANCE  """

from sklearn.metrics import classification_report, confusion_matrix

y_predict_train = NB_classifier.predict(X_train)
y_predict_train
cm = confusion_matrix(y_train, y_predict_train)
sns.heatmap(cm, annot=True)

y_predict_test = NB_classifier.predict(X_test)
cm = confusion_matrix(y_test, y_predict_test)
sns.heatmap(cm, annot=True)

print(classification_report(y_test, y_predict_test))

"""# TASK #9: ASSIGNMENT - TRAIN AND EVALUATE A LOGISTIC REGRESSION CLASSIFIER"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_pred

from sklearn.metrics import confusion_matrix, classification_report
print('Accuracy {} %'.format( 100 * accuracy_score(y_pred, y_test)))

cm = confusion_matrix(y_pred, y_test)
sns.heatmap(cm, annot = True)

print(classification_report(y_test, y_pred))